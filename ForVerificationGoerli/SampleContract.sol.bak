// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract SampleContract is ERC20, Pausable, ERC20Burnable, Ownable {
    constructor() ERC20("CPosContract", "CPC") {}

    mapping(address => uint256) balances;
    /////////////////////////////////////////////////////////////////////////////
    //Sending Ether From a Smart Contract
    //İçerdeki payable smart kontrattan para çıkışı yapılabilir demek.
    //Payable öneki parantezin dışında olursa para girişi olacak demek.
    address payable[] recipients;

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
    }

    function invest() external payable {
        // if (msg.value < 1 ether) {
        //     revert();
        // }
        balances[msg.sender] += msg.value;
    }

    //Burn diye inherit alınan library de fonksiyon olduğu için override ediliyor
    function burn(uint256 amount) public override onlyOwner {
        _burn(_msgSender(), amount);
    }

    //Bu fonksiyon ERC20 den sonra çalışmadı balaceOf1 Çalıştı
    function balanceOf() external view returns (uint256) {
        return address(this).balance;
    }

    function balanceOf1() external view returns (uint256) {
        return address(this).balance;
    }

    //Burda external dışarı açık demek
    //pure function string dönen function demek
    function helloWorld() external pure returns (string memory) {
        return "HelloWorld";
    }

    function sendEther(address payable recepient, uint256 _amount) external {
        recepient.transfer(_amount); // reverts on failure
    }
}
